{
    "$schema": "https://json-schema.org/draft-07/schema#",
    "$id": "./linter-rules.schema.json",
    "title": "Linter Rules",
    "description": "Rules for validating Genesys Cloud Developer Center content.",
    "type": "object",
    "properties": {
        "name": {
            "description": "Name of the rule configuration",
            "type": "string"
        },
        "description": {
            "description": "Description of the rule configuration",
            "type": "string"
        },
        "ruleGroups": {
            "description": "Groups of rules based on common aspect of validation.",
            "type": "object",
            "patternProperties": {
                "^[A-Z]+$":{
                    "description": "ID of the rule group. This will also be the prefix for the specific rules's id.",
                    "type": "object",
                    "properties": {
                        "description": {
                            "description": "Description of the rule group.",
                            "type": "string"
                        },
                        "rules": {
                            "description": "Rules for validation",
                            "type": "object",
                            "patternProperties": {
                                "[0-9]+": {
                                    "$ref": "#rule"
                                }
                            },
                            "additionalProperties": false
                        }
                    },
                    "required": ["rules"],
                    "additionalProperties": false
                }
            },
            "additionalProperties": false
        }
    },
    "required": ["name", "description", "ruleGroups"],
    "additionalProperties": false,
    "definitions": {
        "rule": {
            "$id": "#rule",
            "description": "Defines the rule to validate",
            "type": "object",
            "properties": {
                "description": {
                    "description": "Description of the rule.",
                    "type": "string"
                },
                "path": {
                    "description": "Path for the file/folder to be evaluated.",
                    "type": "string",
                    "pattern": "^(.+)/([^/]+)$"
                },
                "files": {
                    "description": "Array of files/folder to be evaluated.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "type": {
                    "description": "Describes the path. Valid values: ['file', 'directory']",
                    "enum": ["file", "directory"]
                },
                "conditions": {
                    "description": "Array of conditions to evaluate against. All conditions must pass for the rule to pass.",
                    "type": "array",
                    "items": { 
                        "$ref": "#/definitions/condition"
                    },
                    "minItems": 1
                },
                "level": {
                    "description": "Severity level of the rule. Valid: ['warning', 'error']",
                    "enum": ["warning", "error"]
                }
            },
            "required": ["description", "conditions", "level"],
            "oneOf": [{
                "required": ["files"],
                "properties": {
                    "path": false 
                }
            }, {
                "required": ["path"],
                "properties": {
                    "files": false 
                }
            }],
            "additionalProperties": false
        },
        "condition": {
            "$id": "#condition",
            "description": "A condition to evaluate on the rule.",
            "type": "object",
            "properties": {
                "pathExists": {
                    "description": "Check whether the path(file/folder) exists. Setting this to false does not have an effect.",
                    "enum": [true]
                },
                "contains": {
                    "description": "Checks the plaintext file if it contains a specific value.",
                    "type": "array",
                    "items": {
                        "description": "Definition for content to find",
                        "type": "object",
                        "properties": {
                            "type": {
                                "description": "Valid: static, regex",
                                "enum": ["static", "regex"]
                            },
                            "value": {
                                "type": "string"
                            }
                        },
                        "required": ["type", "value"]
                    }
                },
                "notContains": {
                    "description": "Checks the plaintext file that nothing matches the regex pattern.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "markdownMeta": {
                    "description": "Evaluates the frontmatter values in markdown files. Array of objects where the key is the metadata property and the value is regex.",
                    "type": "array",
                    "items": {
                        "type": "object",
                        "patternProperties": {
                            ".*": {
                                "description": "Regex value for this front matter property",
                                "type": "string"
                            }
                        },
                        "additionalProperties": false
                    },
                    "minItems": 1
                },
                "checkReferenceExist": {
                    "description": "Checks if the path(file/folder) exists in the blueprints",
                    "type": "object",
                    "properties": {
                        "pattern": {
                            "description": "(Regex) Define the pattern of the 'link' or reference",
                            "type": "string",
                            "pattern": ".*\\(.*\\).*"
                        },
                        "matchGroup": {
                            "description": "Matching group in the pattern.",
                            "type": "number"
                        }
                    },
                    "required": ["pattern", "matchGroup"],
                    "additionalProperties": false
                }
            },
            "additionalProperties": false
        }
    }
}